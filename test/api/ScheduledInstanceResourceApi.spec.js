/*
 * OTPIXEL
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Otpixel);
  }
}(this, function(expect, Otpixel) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Otpixel.ScheduledInstanceResourceApi();
  });

  describe('(package)', function() {
    describe('ScheduledInstanceResourceApi', function() {
      describe('createScheduledInstance', function() {
        it('should call createScheduledInstance successfully', function(done) {
          // TODO: uncomment, update parameter values for createScheduledInstance call and complete the assertions
          /*
          var body = new Otpixel.ScheduledInstance();
          body.id = "";
          body.idRef = "";
          body.type = "";
          body.start = "0";
          body.end = "0";
          body.user = "";
          body.name = "";
          body.description = "";
          body.status = "";
          body.statusMessage = "";
          body.input = new Otpixel.Input();
          body.input.forceInput = ;
          body.input.inputEndpoint = new Otpixel.InputEndpoint();
          body.input.inputEndpoint.url = "";
          body.input.inputEndpoint.type = "";
          body.input.inputEndpoint.operation = "";
          body.input.inputEndpoint.body = ;
          body.input.inputEndpoint.headers = [new Otpixel.InputHeader()];
          body.input.inputEndpoint.headers[0].key = "";
          body.input.inputEndpoint.headers[0].value = "";
          body.input.postprocess = ;
          body.result = ;
          body.active = false;
          body.scheduleInfo = new Otpixel.ScheduleInfo();
          body.scheduleInfo.unit = "";
          body.scheduleInfo.value = 0;
          body.scheduleInfo.start = "0";

          instance.createScheduledInstance(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Otpixel.Instance);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.idRef).to.be.a('string');
            expect(data.idRef).to.be("");
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("");
            expect(data.start).to.be.a('number');
            expect(data.start).to.be("0");
            expect(data.end).to.be.a('number');
            expect(data.end).to.be("0");
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.statusMessage).to.be.a('string');
            expect(data.statusMessage).to.be("");
            expect(data.input).to.be.a(Otpixel.Input);
                  expect(data.input.forceInput).to.be.a(Object);
              expect(data.input.forceInput).to.be();
              expect(data.input.inputEndpoint).to.be.a(Otpixel.InputEndpoint);
                    expect(data.input.inputEndpoint.url).to.be.a('string');
                expect(data.input.inputEndpoint.url).to.be("");
                expect(data.input.inputEndpoint.type).to.be.a('string');
                expect(data.input.inputEndpoint.type).to.be("");
                expect(data.input.inputEndpoint.operation).to.be.a('string');
                expect(data.input.inputEndpoint.operation).to.be("");
                expect(data.input.inputEndpoint.body).to.be.a(Object);
                expect(data.input.inputEndpoint.body).to.be();
                {
                  let dataCtr = data.input.inputEndpoint.headers;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Otpixel.InputHeader);
                    expect(data.key).to.be.a('string');
                    expect(data.key).to.be("");
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
                  }
                }
              expect(data.input.postprocess).to.be.a(Object);
              expect(data.input.postprocess).to.be();
            expect(data.result).to.be.a(Object);
            expect(data.result).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteScheduledInstance', function() {
        it('should call deleteScheduledInstance successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteScheduledInstance call
          /*
          var id = "id_example";

          instance.deleteScheduledInstance(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getScheduledInstance', function() {
        it('should call getScheduledInstance successfully', function(done) {
          // TODO: uncomment, update parameter values for getScheduledInstance call and complete the assertions
          /*
          var id = "id_example";

          instance.getScheduledInstance(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Otpixel.ScheduledInstance);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.idRef).to.be.a('string');
            expect(data.idRef).to.be("");
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("");
            expect(data.start).to.be.a('number');
            expect(data.start).to.be("0");
            expect(data.end).to.be.a('number');
            expect(data.end).to.be("0");
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.statusMessage).to.be.a('string');
            expect(data.statusMessage).to.be("");
            expect(data.input).to.be.a(Otpixel.Input);
                  expect(data.input.forceInput).to.be.a(Object);
              expect(data.input.forceInput).to.be();
              expect(data.input.inputEndpoint).to.be.a(Otpixel.InputEndpoint);
                    expect(data.input.inputEndpoint.url).to.be.a('string');
                expect(data.input.inputEndpoint.url).to.be("");
                expect(data.input.inputEndpoint.type).to.be.a('string');
                expect(data.input.inputEndpoint.type).to.be("");
                expect(data.input.inputEndpoint.operation).to.be.a('string');
                expect(data.input.inputEndpoint.operation).to.be("");
                expect(data.input.inputEndpoint.body).to.be.a(Object);
                expect(data.input.inputEndpoint.body).to.be();
                {
                  let dataCtr = data.input.inputEndpoint.headers;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Otpixel.InputHeader);
                    expect(data.key).to.be.a('string');
                    expect(data.key).to.be("");
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
                  }
                }
              expect(data.input.postprocess).to.be.a(Object);
              expect(data.input.postprocess).to.be();
            expect(data.result).to.be.a(Object);
            expect(data.result).to.be();
            expect(data.active).to.be.a('boolean');
            expect(data.active).to.be(false);
            expect(data.scheduleInfo).to.be.a(Otpixel.ScheduleInfo);
                  expect(data.scheduleInfo.unit).to.be.a('string');
              expect(data.scheduleInfo.unit).to.be("");
              expect(data.scheduleInfo.value).to.be.a('number');
              expect(data.scheduleInfo.value).to.be(0);
              expect(data.scheduleInfo.start).to.be.a('number');
              expect(data.scheduleInfo.start).to.be("0");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listScheduledInstances', function() {
        it('should call listScheduledInstances successfully', function(done) {
          // TODO: uncomment, update parameter values for listScheduledInstances call and complete the assertions
          /*
          var opts = {};
          opts.idRef = "idRef_example";
          opts.user = "user_example";
          opts.status = "status_example";

          instance.listScheduledInstances(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Otpixel.ScheduledInstance);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              expect(data.idRef).to.be.a('string');
              expect(data.idRef).to.be("");
              expect(data.type).to.be.a('string');
              expect(data.type).to.be("");
              expect(data.start).to.be.a('number');
              expect(data.start).to.be("0");
              expect(data.end).to.be.a('number');
              expect(data.end).to.be("0");
              expect(data.user).to.be.a('string');
              expect(data.user).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.status).to.be.a('string');
              expect(data.status).to.be("");
              expect(data.statusMessage).to.be.a('string');
              expect(data.statusMessage).to.be("");
              expect(data.input).to.be.a(Otpixel.Input);
                    expect(data.input.forceInput).to.be.a(Object);
                expect(data.input.forceInput).to.be();
                expect(data.input.inputEndpoint).to.be.a(Otpixel.InputEndpoint);
                      expect(data.input.inputEndpoint.url).to.be.a('string');
                  expect(data.input.inputEndpoint.url).to.be("");
                  expect(data.input.inputEndpoint.type).to.be.a('string');
                  expect(data.input.inputEndpoint.type).to.be("");
                  expect(data.input.inputEndpoint.operation).to.be.a('string');
                  expect(data.input.inputEndpoint.operation).to.be("");
                  expect(data.input.inputEndpoint.body).to.be.a(Object);
                  expect(data.input.inputEndpoint.body).to.be();
                  {
                    let dataCtr = data.input.inputEndpoint.headers;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Otpixel.InputHeader);
                      expect(data.key).to.be.a('string');
                      expect(data.key).to.be("");
                      expect(data.value).to.be.a('string');
                      expect(data.value).to.be("");
                    }
                  }
                expect(data.input.postprocess).to.be.a(Object);
                expect(data.input.postprocess).to.be();
              expect(data.result).to.be.a(Object);
              expect(data.result).to.be();
              expect(data.active).to.be.a('boolean');
              expect(data.active).to.be(false);
              expect(data.scheduleInfo).to.be.a(Otpixel.ScheduleInfo);
                    expect(data.scheduleInfo.unit).to.be.a('string');
                expect(data.scheduleInfo.unit).to.be("");
                expect(data.scheduleInfo.value).to.be.a('number');
                expect(data.scheduleInfo.value).to.be(0);
                expect(data.scheduleInfo.start).to.be.a('number');
                expect(data.scheduleInfo.start).to.be("0");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateScheduledInstance', function() {
        it('should call updateScheduledInstance successfully', function(done) {
          // TODO: uncomment, update parameter values for updateScheduledInstance call and complete the assertions
          /*
          var body = new Otpixel.ScheduledInstance();
          body.id = "";
          body.idRef = "";
          body.type = "";
          body.start = "0";
          body.end = "0";
          body.user = "";
          body.name = "";
          body.description = "";
          body.status = "";
          body.statusMessage = "";
          body.input = new Otpixel.Input();
          body.input.forceInput = ;
          body.input.inputEndpoint = new Otpixel.InputEndpoint();
          body.input.inputEndpoint.url = "";
          body.input.inputEndpoint.type = "";
          body.input.inputEndpoint.operation = "";
          body.input.inputEndpoint.body = ;
          body.input.inputEndpoint.headers = [new Otpixel.InputHeader()];
          body.input.inputEndpoint.headers[0].key = "";
          body.input.inputEndpoint.headers[0].value = "";
          body.input.postprocess = ;
          body.result = ;
          body.active = false;
          body.scheduleInfo = new Otpixel.ScheduleInfo();
          body.scheduleInfo.unit = "";
          body.scheduleInfo.value = 0;
          body.scheduleInfo.start = "0";

          instance.updateScheduledInstance(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Otpixel.ScheduledInstance);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.idRef).to.be.a('string');
            expect(data.idRef).to.be("");
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("");
            expect(data.start).to.be.a('number');
            expect(data.start).to.be("0");
            expect(data.end).to.be.a('number');
            expect(data.end).to.be("0");
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.statusMessage).to.be.a('string');
            expect(data.statusMessage).to.be("");
            expect(data.input).to.be.a(Otpixel.Input);
                  expect(data.input.forceInput).to.be.a(Object);
              expect(data.input.forceInput).to.be();
              expect(data.input.inputEndpoint).to.be.a(Otpixel.InputEndpoint);
                    expect(data.input.inputEndpoint.url).to.be.a('string');
                expect(data.input.inputEndpoint.url).to.be("");
                expect(data.input.inputEndpoint.type).to.be.a('string');
                expect(data.input.inputEndpoint.type).to.be("");
                expect(data.input.inputEndpoint.operation).to.be.a('string');
                expect(data.input.inputEndpoint.operation).to.be("");
                expect(data.input.inputEndpoint.body).to.be.a(Object);
                expect(data.input.inputEndpoint.body).to.be();
                {
                  let dataCtr = data.input.inputEndpoint.headers;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Otpixel.InputHeader);
                    expect(data.key).to.be.a('string');
                    expect(data.key).to.be("");
                    expect(data.value).to.be.a('string');
                    expect(data.value).to.be("");
                  }
                }
              expect(data.input.postprocess).to.be.a(Object);
              expect(data.input.postprocess).to.be();
            expect(data.result).to.be.a(Object);
            expect(data.result).to.be();
            expect(data.active).to.be.a('boolean');
            expect(data.active).to.be(false);
            expect(data.scheduleInfo).to.be.a(Otpixel.ScheduleInfo);
                  expect(data.scheduleInfo.unit).to.be.a('string');
              expect(data.scheduleInfo.unit).to.be("");
              expect(data.scheduleInfo.value).to.be.a('number');
              expect(data.scheduleInfo.value).to.be(0);
              expect(data.scheduleInfo.start).to.be.a('number');
              expect(data.scheduleInfo.start).to.be("0");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
