/*
 * OTPIXEL
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Otpixel);
  }
}(this, function(expect, Otpixel) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Otpixel.PortResourceApi();
  });

  describe('(package)', function() {
    describe('PortResourceApi', function() {
      describe('createPort', function() {
        it('should call createPort successfully', function(done) {
          // TODO: uncomment, update parameter values for createPort call and complete the assertions
          /*
          var body = new Otpixel.Port();
          body.id = "";
          body.name = "";
          body.code = "";
          body.location = new Otpixel.Coordinates();
          body.location.lat = 0.0;
          body.location.lon = 0.0;
          body.address = "";

          instance.createPort(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Otpixel.Port);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.code).to.be.a('string');
            expect(data.code).to.be("");
            expect(data.location).to.be.a(Otpixel.Coordinates);
                  expect(data.location.lat).to.be.a('number');
              expect(data.location.lat).to.be(0.0);
              expect(data.location.lon).to.be.a('number');
              expect(data.location.lon).to.be(0.0);
            expect(data.address).to.be.a('string');
            expect(data.address).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletePort', function() {
        it('should call deletePort successfully', function(done) {
          // TODO: uncomment, update parameter values for deletePort call
          /*
          var id = "id_example";

          instance.deletePort(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPort', function() {
        it('should call getPort successfully', function(done) {
          // TODO: uncomment, update parameter values for getPort call and complete the assertions
          /*
          var id = "id_example";

          instance.getPort(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Otpixel.Port);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.code).to.be.a('string');
            expect(data.code).to.be("");
            expect(data.location).to.be.a(Otpixel.Coordinates);
                  expect(data.location.lat).to.be.a('number');
              expect(data.location.lat).to.be(0.0);
              expect(data.location.lon).to.be.a('number');
              expect(data.location.lon).to.be(0.0);
            expect(data.address).to.be.a('string');
            expect(data.address).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listPorts', function() {
        it('should call listPorts successfully', function(done) {
          // TODO: uncomment listPorts call and complete the assertions
          /*

          instance.listPorts(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Otpixel.Port);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.code).to.be.a('string');
              expect(data.code).to.be("");
              expect(data.location).to.be.a(Otpixel.Coordinates);
                    expect(data.location.lat).to.be.a('number');
                expect(data.location.lat).to.be(0.0);
                expect(data.location.lon).to.be.a('number');
                expect(data.location.lon).to.be(0.0);
              expect(data.address).to.be.a('string');
              expect(data.address).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatePort', function() {
        it('should call updatePort successfully', function(done) {
          // TODO: uncomment, update parameter values for updatePort call and complete the assertions
          /*
          var body = new Otpixel.Port();
          body.id = "";
          body.name = "";
          body.code = "";
          body.location = new Otpixel.Coordinates();
          body.location.lat = 0.0;
          body.location.lon = 0.0;
          body.address = "";

          instance.updatePort(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Otpixel.Port);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.code).to.be.a('string');
            expect(data.code).to.be("");
            expect(data.location).to.be.a(Otpixel.Coordinates);
                  expect(data.location.lat).to.be.a('number');
              expect(data.location.lat).to.be(0.0);
              expect(data.location.lon).to.be.a('number');
              expect(data.location.lon).to.be(0.0);
            expect(data.address).to.be.a('string');
            expect(data.address).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
