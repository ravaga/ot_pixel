/*
 * OTPIXEL
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.6.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Otpixel);
  }
}(this, function(expect, Otpixel) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Otpixel.ModelResourceApi();
  });

  describe('(package)', function() {
    describe('ModelResourceApi', function() {
      describe('createModel', function() {
        it('should call createModel successfully', function(done) {
          // TODO: uncomment, update parameter values for createModel call and complete the assertions
          /*
          var body = new Otpixel.Model();
          body.id = "";
          body.generalInfo = new Otpixel.GeneralInfo();
          body.generalInfo.name = "";
          body.generalInfo.version = "";
          body.generalInfo.description = "";
          body.generalInfo.supportSubscription = false;
          body.generalInfo.supportExecSync = false;
          body.generalInfo.supportExecAsync = false;
          body.generalInfo.type = "";
          body.generalInfo.category = "";
          body.generalInfo.system = new Otpixel.SystemInfo();
          body.generalInfo.system.connectors = [new Otpixel.ConnectorItem()];
          body.generalInfo.system.connectors[0].type = "";
          body.generalInfo.system.connectors[0].description = "";
          body.generalInfo.system.connectors[0].options = [new Otpixel.ConnectorOptionItem()];
          body.generalInfo.system.connectors[0].options[0].name = "";
          body.generalInfo.system.connectors[0].options[0].type = "";
          body.generalInfo.system.connectors[0].options[0].pattern = "";
          body.generalInfo.system.connectors[0].options[0].description = "";
          body.generalInfo.system.connectors[0].options[0].required = false;
          body.generalInfo.system.transform = new Otpixel.Transform();
          body.generalInfo.system.transform.supportedTransformations = [new Otpixel.SupportedTransformationItem()];
          body.generalInfo.system.transform.supportedTransformations[0].name = "";
          body.generalInfo.system.transform.supportedTransformations[0].convertFrom = "";
          body.generalInfo.system.transform.supportedTransformations[0].convertTo = "";
          body.generalInfo.input = [new Otpixel.InputItem()];
          body.generalInfo.input[0].name = "";
          body.generalInfo.input[0].type = "";
          body.generalInfo.input[0].supportedConnectors = [""];
          body.generalInfo.input[0].description = "";
          body.generalInfo.input[0].required = false;
          body.generalInfo.input[0].metadata = ;
          body.generalInfo.input[0].options = [new Otpixel.InputOptionItem()];
          body.generalInfo.input[0].options[0].name = "";
          body.generalInfo.input[0].options[0].type = "";
          body.generalInfo.input[0].options[0].pattern = "";
          body.generalInfo.input[0].options[0].description = "";
          body.generalInfo.input[0].options[0].required = false;
          body.generalInfo.output = [new Otpixel.OutputItem()];
          body.generalInfo.output[0].name = "";
          body.generalInfo.output[0].type = "";
          body.generalInfo.output[0].supportedConnectors = [""];
          body.generalInfo.output[0].description = "";
          body.generalInfo.output[0].required = false;
          body.generalInfo.output[0].metadata = ;
          body.generalInfo.output[0].options = [new Otpixel.OutputOptionItem()];
          body.generalInfo.output[0].options[0].name = "";
          body.generalInfo.output[0].options[0].type = "";
          body.generalInfo.output[0].options[0].description = "";
          body.generalInfo.output[0].options[0].pattern = "";
          body.generalInfo.output[0].options[0].required = false;
          body.generalInfo.logging = [new Otpixel.LoggingItem()];
          body.generalInfo.logging[0].name = "";
          body.generalInfo.logging[0].type = "";
          body.generalInfo.logging[0].supportedConnectors = [""];
          body.generalInfo.logging[0].description = "";
          body.generalInfo.logging[0].required = false;
          body.generalInfo.logging[0].verbose = "";
          body.generalInfo.logging[0].metadata = ;
          body.generalInfo.logging[0].options = [new Otpixel.LoggingOptionItem()];
          body.generalInfo.logging[0].options[0].name = "";
          body.generalInfo.logging[0].options[0].type = "";
          body.generalInfo.logging[0].options[0].description = "";
          body.generalInfo.logging[0].options[0].pattern = "";
          body.generalInfo.logging[0].options[0].required = false;
          body.dockerInfo = new Otpixel.DockerInfo();
          body.dockerInfo.dockerName = "";
          body.dockerInfo.label = "";
          body.dockerInfo.dockerRepo = new Otpixel.DockerRepo();
          body.dockerInfo.dockerRepo.url = "";
          body.dockerInfo.dockerRepo.user = "";
          body.dockerInfo.dockerRepo.password = "";
          body.creation = "0";
          body.otStatus = "";

          instance.createModel(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Otpixel.Model);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.generalInfo).to.be.a(Otpixel.GeneralInfo);
                  expect(data.generalInfo.name).to.be.a('string');
              expect(data.generalInfo.name).to.be("");
              expect(data.generalInfo.version).to.be.a('string');
              expect(data.generalInfo.version).to.be("");
              expect(data.generalInfo.description).to.be.a('string');
              expect(data.generalInfo.description).to.be("");
              expect(data.generalInfo.supportSubscription).to.be.a('boolean');
              expect(data.generalInfo.supportSubscription).to.be(false);
              expect(data.generalInfo.supportExecSync).to.be.a('boolean');
              expect(data.generalInfo.supportExecSync).to.be(false);
              expect(data.generalInfo.supportExecAsync).to.be.a('boolean');
              expect(data.generalInfo.supportExecAsync).to.be(false);
              expect(data.generalInfo.type).to.be.a('string');
              expect(data.generalInfo.type).to.be("");
              expect(data.generalInfo.category).to.be.a('string');
              expect(data.generalInfo.category).to.be("");
              expect(data.generalInfo.system).to.be.a(Otpixel.SystemInfo);
                    {
                  let dataCtr = data.generalInfo.system.connectors;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Otpixel.ConnectorItem);
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    {
                      let dataCtr = data.options;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Otpixel.ConnectorOptionItem);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.type).to.be.a('string');
                        expect(data.type).to.be("");
                        expect(data.pattern).to.be.a('string');
                        expect(data.pattern).to.be("");
                        expect(data.description).to.be.a('string');
                        expect(data.description).to.be("");
                        expect(data.required).to.be.a('boolean');
                        expect(data.required).to.be(false);
        
                              }
                    }
    
                          }
                }
                expect(data.generalInfo.system.transform).to.be.a(Otpixel.Transform);
                      {
                    let dataCtr = data.generalInfo.system.transform.supportedTransformations;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Otpixel.SupportedTransformationItem);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.convertFrom).to.be.a('string');
                      expect(data.convertFrom).to.be("");
                      expect(data.convertTo).to.be.a('string');
                      expect(data.convertTo).to.be("");
      
                            }
                  }
              {
                let dataCtr = data.generalInfo.input;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Otpixel.InputItem);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.type).to.be.a('string');
                  expect(data.type).to.be("");
                  {
                    let dataCtr = data.supportedConnectors;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.required).to.be.a('boolean');
                  expect(data.required).to.be(false);
                  expect(data.metadata).to.be.a(Object);
                  expect(data.metadata).to.be();
                  {
                    let dataCtr = data.options;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Otpixel.InputOptionItem);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.type).to.be.a('string');
                      expect(data.type).to.be("");
                      expect(data.pattern).to.be.a('string');
                      expect(data.pattern).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.required).to.be.a('boolean');
                      expect(data.required).to.be(false);
      
                            }
                  }
  
                        }
              }
              {
                let dataCtr = data.generalInfo.output;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Otpixel.OutputItem);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.type).to.be.a('string');
                  expect(data.type).to.be("");
                  {
                    let dataCtr = data.supportedConnectors;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.required).to.be.a('boolean');
                  expect(data.required).to.be(false);
                  expect(data.metadata).to.be.a(Object);
                  expect(data.metadata).to.be();
                  {
                    let dataCtr = data.options;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Otpixel.OutputOptionItem);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.type).to.be.a('string');
                      expect(data.type).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.pattern).to.be.a('string');
                      expect(data.pattern).to.be("");
                      expect(data.required).to.be.a('boolean');
                      expect(data.required).to.be(false);
      
                            }
                  }
  
                        }
              }
              {
                let dataCtr = data.generalInfo.logging;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Otpixel.LoggingItem);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.type).to.be.a('string');
                  expect(data.type).to.be("");
                  {
                    let dataCtr = data.supportedConnectors;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.required).to.be.a('boolean');
                  expect(data.required).to.be(false);
                  expect(data.verbose).to.be.a('string');
                  expect(data.verbose).to.be("");
                  expect(data.metadata).to.be.a(Object);
                  expect(data.metadata).to.be();
                  {
                    let dataCtr = data.options;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Otpixel.LoggingOptionItem);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.type).to.be.a('string');
                      expect(data.type).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.pattern).to.be.a('string');
                      expect(data.pattern).to.be("");
                      expect(data.required).to.be.a('boolean');
                      expect(data.required).to.be(false);
      
                            }
                  }
  
                        }
              }
            expect(data.dockerInfo).to.be.a(Otpixel.DockerInfo);
                  expect(data.dockerInfo.dockerName).to.be.a('string');
              expect(data.dockerInfo.dockerName).to.be("");
              expect(data.dockerInfo.label).to.be.a('string');
              expect(data.dockerInfo.label).to.be("");
              expect(data.dockerInfo.dockerRepo).to.be.a(Otpixel.DockerRepo);
                    expect(data.dockerInfo.dockerRepo.url).to.be.a('string');
                expect(data.dockerInfo.dockerRepo.url).to.be("");
                expect(data.dockerInfo.dockerRepo.user).to.be.a('string');
                expect(data.dockerInfo.dockerRepo.user).to.be("");
                expect(data.dockerInfo.dockerRepo.password).to.be.a('string');
                expect(data.dockerInfo.dockerRepo.password).to.be("");
            expect(data.creation).to.be.a('number');
            expect(data.creation).to.be("0");
            expect(data.otStatus).to.be.a('string');
            expect(data.otStatus).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteModel', function() {
        it('should call deleteModel successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteModel call
          /*
          var id = "id_example";

          instance.deleteModel(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getModel', function() {
        it('should call getModel successfully', function(done) {
          // TODO: uncomment, update parameter values for getModel call and complete the assertions
          /*
          var id = "id_example";

          instance.getModel(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Otpixel.Model);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.generalInfo).to.be.a(Otpixel.GeneralInfo);
                  expect(data.generalInfo.name).to.be.a('string');
              expect(data.generalInfo.name).to.be("");
              expect(data.generalInfo.version).to.be.a('string');
              expect(data.generalInfo.version).to.be("");
              expect(data.generalInfo.description).to.be.a('string');
              expect(data.generalInfo.description).to.be("");
              expect(data.generalInfo.supportSubscription).to.be.a('boolean');
              expect(data.generalInfo.supportSubscription).to.be(false);
              expect(data.generalInfo.supportExecSync).to.be.a('boolean');
              expect(data.generalInfo.supportExecSync).to.be(false);
              expect(data.generalInfo.supportExecAsync).to.be.a('boolean');
              expect(data.generalInfo.supportExecAsync).to.be(false);
              expect(data.generalInfo.type).to.be.a('string');
              expect(data.generalInfo.type).to.be("");
              expect(data.generalInfo.category).to.be.a('string');
              expect(data.generalInfo.category).to.be("");
              expect(data.generalInfo.system).to.be.a(Otpixel.SystemInfo);
                    {
                  let dataCtr = data.generalInfo.system.connectors;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Otpixel.ConnectorItem);
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    {
                      let dataCtr = data.options;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Otpixel.ConnectorOptionItem);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.type).to.be.a('string');
                        expect(data.type).to.be("");
                        expect(data.pattern).to.be.a('string');
                        expect(data.pattern).to.be("");
                        expect(data.description).to.be.a('string');
                        expect(data.description).to.be("");
                        expect(data.required).to.be.a('boolean');
                        expect(data.required).to.be(false);
        
                              }
                    }
    
                          }
                }
                expect(data.generalInfo.system.transform).to.be.a(Otpixel.Transform);
                      {
                    let dataCtr = data.generalInfo.system.transform.supportedTransformations;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Otpixel.SupportedTransformationItem);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.convertFrom).to.be.a('string');
                      expect(data.convertFrom).to.be("");
                      expect(data.convertTo).to.be.a('string');
                      expect(data.convertTo).to.be("");
      
                            }
                  }
              {
                let dataCtr = data.generalInfo.input;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Otpixel.InputItem);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.type).to.be.a('string');
                  expect(data.type).to.be("");
                  {
                    let dataCtr = data.supportedConnectors;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.required).to.be.a('boolean');
                  expect(data.required).to.be(false);
                  expect(data.metadata).to.be.a(Object);
                  expect(data.metadata).to.be();
                  {
                    let dataCtr = data.options;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Otpixel.InputOptionItem);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.type).to.be.a('string');
                      expect(data.type).to.be("");
                      expect(data.pattern).to.be.a('string');
                      expect(data.pattern).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.required).to.be.a('boolean');
                      expect(data.required).to.be(false);
      
                            }
                  }
  
                        }
              }
              {
                let dataCtr = data.generalInfo.output;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Otpixel.OutputItem);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.type).to.be.a('string');
                  expect(data.type).to.be("");
                  {
                    let dataCtr = data.supportedConnectors;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.required).to.be.a('boolean');
                  expect(data.required).to.be(false);
                  expect(data.metadata).to.be.a(Object);
                  expect(data.metadata).to.be();
                  {
                    let dataCtr = data.options;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Otpixel.OutputOptionItem);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.type).to.be.a('string');
                      expect(data.type).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.pattern).to.be.a('string');
                      expect(data.pattern).to.be("");
                      expect(data.required).to.be.a('boolean');
                      expect(data.required).to.be(false);
      
                            }
                  }
  
                        }
              }
              {
                let dataCtr = data.generalInfo.logging;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Otpixel.LoggingItem);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.type).to.be.a('string');
                  expect(data.type).to.be("");
                  {
                    let dataCtr = data.supportedConnectors;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.required).to.be.a('boolean');
                  expect(data.required).to.be(false);
                  expect(data.verbose).to.be.a('string');
                  expect(data.verbose).to.be("");
                  expect(data.metadata).to.be.a(Object);
                  expect(data.metadata).to.be();
                  {
                    let dataCtr = data.options;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Otpixel.LoggingOptionItem);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.type).to.be.a('string');
                      expect(data.type).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.pattern).to.be.a('string');
                      expect(data.pattern).to.be("");
                      expect(data.required).to.be.a('boolean');
                      expect(data.required).to.be(false);
      
                            }
                  }
  
                        }
              }
            expect(data.dockerInfo).to.be.a(Otpixel.DockerInfo);
                  expect(data.dockerInfo.dockerName).to.be.a('string');
              expect(data.dockerInfo.dockerName).to.be("");
              expect(data.dockerInfo.label).to.be.a('string');
              expect(data.dockerInfo.label).to.be("");
              expect(data.dockerInfo.dockerRepo).to.be.a(Otpixel.DockerRepo);
                    expect(data.dockerInfo.dockerRepo.url).to.be.a('string');
                expect(data.dockerInfo.dockerRepo.url).to.be("");
                expect(data.dockerInfo.dockerRepo.user).to.be.a('string');
                expect(data.dockerInfo.dockerRepo.user).to.be("");
                expect(data.dockerInfo.dockerRepo.password).to.be.a('string');
                expect(data.dockerInfo.dockerRepo.password).to.be("");
            expect(data.creation).to.be.a('number');
            expect(data.creation).to.be("0");
            expect(data.otStatus).to.be.a('string');
            expect(data.otStatus).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getModelInfo', function() {
        it('should call getModelInfo successfully', function(done) {
          // TODO: uncomment, update parameter values for getModelInfo call and complete the assertions
          /*
          var id = "id_example";

          instance.getModelInfo(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Otpixel.GeneralInfo);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.version).to.be.a('string');
            expect(data.version).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.supportSubscription).to.be.a('boolean');
            expect(data.supportSubscription).to.be(false);
            expect(data.supportExecSync).to.be.a('boolean');
            expect(data.supportExecSync).to.be(false);
            expect(data.supportExecAsync).to.be.a('boolean');
            expect(data.supportExecAsync).to.be(false);
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("");
            expect(data.category).to.be.a('string');
            expect(data.category).to.be("");
            expect(data.system).to.be.a(Otpixel.SystemInfo);
                  {
                let dataCtr = data.system.connectors;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Otpixel.ConnectorItem);
                  expect(data.type).to.be.a('string');
                  expect(data.type).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  {
                    let dataCtr = data.options;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Otpixel.ConnectorOptionItem);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.type).to.be.a('string');
                      expect(data.type).to.be("");
                      expect(data.pattern).to.be.a('string');
                      expect(data.pattern).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.required).to.be.a('boolean');
                      expect(data.required).to.be(false);
      
                            }
                  }
  
                        }
              }
              expect(data.system.transform).to.be.a(Otpixel.Transform);
                    {
                  let dataCtr = data.system.transform.supportedTransformations;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Otpixel.SupportedTransformationItem);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.convertFrom).to.be.a('string');
                    expect(data.convertFrom).to.be("");
                    expect(data.convertTo).to.be.a('string');
                    expect(data.convertTo).to.be("");
    
                          }
                }
            {
              let dataCtr = data.input;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Otpixel.InputItem);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");
                {
                  let dataCtr = data.supportedConnectors;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.required).to.be.a('boolean');
                expect(data.required).to.be(false);
                expect(data.metadata).to.be.a(Object);
                expect(data.metadata).to.be();
                {
                  let dataCtr = data.options;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Otpixel.InputOptionItem);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("");
                    expect(data.pattern).to.be.a('string');
                    expect(data.pattern).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    expect(data.required).to.be.a('boolean');
                    expect(data.required).to.be(false);
    
                          }
                }

                      }
            }
            {
              let dataCtr = data.output;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Otpixel.OutputItem);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");
                {
                  let dataCtr = data.supportedConnectors;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.required).to.be.a('boolean');
                expect(data.required).to.be(false);
                expect(data.metadata).to.be.a(Object);
                expect(data.metadata).to.be();
                {
                  let dataCtr = data.options;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Otpixel.OutputOptionItem);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    expect(data.pattern).to.be.a('string');
                    expect(data.pattern).to.be("");
                    expect(data.required).to.be.a('boolean');
                    expect(data.required).to.be(false);
    
                          }
                }

                      }
            }
            {
              let dataCtr = data.logging;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Otpixel.LoggingItem);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");
                {
                  let dataCtr = data.supportedConnectors;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.required).to.be.a('boolean');
                expect(data.required).to.be(false);
                expect(data.verbose).to.be.a('string');
                expect(data.verbose).to.be("");
                expect(data.metadata).to.be.a(Object);
                expect(data.metadata).to.be();
                {
                  let dataCtr = data.options;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Otpixel.LoggingOptionItem);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    expect(data.pattern).to.be.a('string');
                    expect(data.pattern).to.be("");
                    expect(data.required).to.be.a('boolean');
                    expect(data.required).to.be(false);
    
                          }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listModels', function() {
        it('should call listModels successfully', function(done) {
          // TODO: uncomment, update parameter values for listModels call and complete the assertions
          /*
          var opts = {};
          opts.otStatus = "otStatus_example";
          opts.type = "type_example";

          instance.listModels(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Otpixel.Model);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              expect(data.generalInfo).to.be.a(Otpixel.GeneralInfo);
                    expect(data.generalInfo.name).to.be.a('string');
                expect(data.generalInfo.name).to.be("");
                expect(data.generalInfo.version).to.be.a('string');
                expect(data.generalInfo.version).to.be("");
                expect(data.generalInfo.description).to.be.a('string');
                expect(data.generalInfo.description).to.be("");
                expect(data.generalInfo.supportSubscription).to.be.a('boolean');
                expect(data.generalInfo.supportSubscription).to.be(false);
                expect(data.generalInfo.supportExecSync).to.be.a('boolean');
                expect(data.generalInfo.supportExecSync).to.be(false);
                expect(data.generalInfo.supportExecAsync).to.be.a('boolean');
                expect(data.generalInfo.supportExecAsync).to.be(false);
                expect(data.generalInfo.type).to.be.a('string');
                expect(data.generalInfo.type).to.be("");
                expect(data.generalInfo.category).to.be.a('string');
                expect(data.generalInfo.category).to.be("");
                expect(data.generalInfo.system).to.be.a(Otpixel.SystemInfo);
                      {
                    let dataCtr = data.generalInfo.system.connectors;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Otpixel.ConnectorItem);
                      expect(data.type).to.be.a('string');
                      expect(data.type).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      {
                        let dataCtr = data.options;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Otpixel.ConnectorOptionItem);
                          expect(data.name).to.be.a('string');
                          expect(data.name).to.be("");
                          expect(data.type).to.be.a('string');
                          expect(data.type).to.be("");
                          expect(data.pattern).to.be.a('string');
                          expect(data.pattern).to.be("");
                          expect(data.description).to.be.a('string');
                          expect(data.description).to.be("");
                          expect(data.required).to.be.a('boolean');
                          expect(data.required).to.be(false);
          
                                }
                      }
      
                            }
                  }
                  expect(data.generalInfo.system.transform).to.be.a(Otpixel.Transform);
                        {
                      let dataCtr = data.generalInfo.system.transform.supportedTransformations;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Otpixel.SupportedTransformationItem);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.convertFrom).to.be.a('string');
                        expect(data.convertFrom).to.be("");
                        expect(data.convertTo).to.be.a('string');
                        expect(data.convertTo).to.be("");
        
                              }
                    }
                {
                  let dataCtr = data.generalInfo.input;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Otpixel.InputItem);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("");
                    {
                      let dataCtr = data.supportedConnectors;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    expect(data.required).to.be.a('boolean');
                    expect(data.required).to.be(false);
                    expect(data.metadata).to.be.a(Object);
                    expect(data.metadata).to.be();
                    {
                      let dataCtr = data.options;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Otpixel.InputOptionItem);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.type).to.be.a('string');
                        expect(data.type).to.be("");
                        expect(data.pattern).to.be.a('string');
                        expect(data.pattern).to.be("");
                        expect(data.description).to.be.a('string');
                        expect(data.description).to.be("");
                        expect(data.required).to.be.a('boolean');
                        expect(data.required).to.be(false);
        
                              }
                    }
    
                          }
                }
                {
                  let dataCtr = data.generalInfo.output;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Otpixel.OutputItem);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("");
                    {
                      let dataCtr = data.supportedConnectors;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    expect(data.required).to.be.a('boolean');
                    expect(data.required).to.be(false);
                    expect(data.metadata).to.be.a(Object);
                    expect(data.metadata).to.be();
                    {
                      let dataCtr = data.options;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Otpixel.OutputOptionItem);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.type).to.be.a('string');
                        expect(data.type).to.be("");
                        expect(data.description).to.be.a('string');
                        expect(data.description).to.be("");
                        expect(data.pattern).to.be.a('string');
                        expect(data.pattern).to.be("");
                        expect(data.required).to.be.a('boolean');
                        expect(data.required).to.be(false);
        
                              }
                    }
    
                          }
                }
                {
                  let dataCtr = data.generalInfo.logging;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Otpixel.LoggingItem);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("");
                    {
                      let dataCtr = data.supportedConnectors;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    expect(data.required).to.be.a('boolean');
                    expect(data.required).to.be(false);
                    expect(data.verbose).to.be.a('string');
                    expect(data.verbose).to.be("");
                    expect(data.metadata).to.be.a(Object);
                    expect(data.metadata).to.be();
                    {
                      let dataCtr = data.options;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Otpixel.LoggingOptionItem);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.type).to.be.a('string');
                        expect(data.type).to.be("");
                        expect(data.description).to.be.a('string');
                        expect(data.description).to.be("");
                        expect(data.pattern).to.be.a('string');
                        expect(data.pattern).to.be("");
                        expect(data.required).to.be.a('boolean');
                        expect(data.required).to.be(false);
        
                              }
                    }
    
                          }
                }
              expect(data.dockerInfo).to.be.a(Otpixel.DockerInfo);
                    expect(data.dockerInfo.dockerName).to.be.a('string');
                expect(data.dockerInfo.dockerName).to.be("");
                expect(data.dockerInfo.label).to.be.a('string');
                expect(data.dockerInfo.label).to.be("");
                expect(data.dockerInfo.dockerRepo).to.be.a(Otpixel.DockerRepo);
                      expect(data.dockerInfo.dockerRepo.url).to.be.a('string');
                  expect(data.dockerInfo.dockerRepo.url).to.be("");
                  expect(data.dockerInfo.dockerRepo.user).to.be.a('string');
                  expect(data.dockerInfo.dockerRepo.user).to.be("");
                  expect(data.dockerInfo.dockerRepo.password).to.be.a('string');
                  expect(data.dockerInfo.dockerRepo.password).to.be("");
              expect(data.creation).to.be.a('number');
              expect(data.creation).to.be("0");
              expect(data.otStatus).to.be.a('string');
              expect(data.otStatus).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateModel', function() {
        it('should call updateModel successfully', function(done) {
          // TODO: uncomment, update parameter values for updateModel call and complete the assertions
          /*
          var body = new Otpixel.Model();
          body.id = "";
          body.generalInfo = new Otpixel.GeneralInfo();
          body.generalInfo.name = "";
          body.generalInfo.version = "";
          body.generalInfo.description = "";
          body.generalInfo.supportSubscription = false;
          body.generalInfo.supportExecSync = false;
          body.generalInfo.supportExecAsync = false;
          body.generalInfo.type = "";
          body.generalInfo.category = "";
          body.generalInfo.system = new Otpixel.SystemInfo();
          body.generalInfo.system.connectors = [new Otpixel.ConnectorItem()];
          body.generalInfo.system.connectors[0].type = "";
          body.generalInfo.system.connectors[0].description = "";
          body.generalInfo.system.connectors[0].options = [new Otpixel.ConnectorOptionItem()];
          body.generalInfo.system.connectors[0].options[0].name = "";
          body.generalInfo.system.connectors[0].options[0].type = "";
          body.generalInfo.system.connectors[0].options[0].pattern = "";
          body.generalInfo.system.connectors[0].options[0].description = "";
          body.generalInfo.system.connectors[0].options[0].required = false;
          body.generalInfo.system.transform = new Otpixel.Transform();
          body.generalInfo.system.transform.supportedTransformations = [new Otpixel.SupportedTransformationItem()];
          body.generalInfo.system.transform.supportedTransformations[0].name = "";
          body.generalInfo.system.transform.supportedTransformations[0].convertFrom = "";
          body.generalInfo.system.transform.supportedTransformations[0].convertTo = "";
          body.generalInfo.input = [new Otpixel.InputItem()];
          body.generalInfo.input[0].name = "";
          body.generalInfo.input[0].type = "";
          body.generalInfo.input[0].supportedConnectors = [""];
          body.generalInfo.input[0].description = "";
          body.generalInfo.input[0].required = false;
          body.generalInfo.input[0].metadata = ;
          body.generalInfo.input[0].options = [new Otpixel.InputOptionItem()];
          body.generalInfo.input[0].options[0].name = "";
          body.generalInfo.input[0].options[0].type = "";
          body.generalInfo.input[0].options[0].pattern = "";
          body.generalInfo.input[0].options[0].description = "";
          body.generalInfo.input[0].options[0].required = false;
          body.generalInfo.output = [new Otpixel.OutputItem()];
          body.generalInfo.output[0].name = "";
          body.generalInfo.output[0].type = "";
          body.generalInfo.output[0].supportedConnectors = [""];
          body.generalInfo.output[0].description = "";
          body.generalInfo.output[0].required = false;
          body.generalInfo.output[0].metadata = ;
          body.generalInfo.output[0].options = [new Otpixel.OutputOptionItem()];
          body.generalInfo.output[0].options[0].name = "";
          body.generalInfo.output[0].options[0].type = "";
          body.generalInfo.output[0].options[0].description = "";
          body.generalInfo.output[0].options[0].pattern = "";
          body.generalInfo.output[0].options[0].required = false;
          body.generalInfo.logging = [new Otpixel.LoggingItem()];
          body.generalInfo.logging[0].name = "";
          body.generalInfo.logging[0].type = "";
          body.generalInfo.logging[0].supportedConnectors = [""];
          body.generalInfo.logging[0].description = "";
          body.generalInfo.logging[0].required = false;
          body.generalInfo.logging[0].verbose = "";
          body.generalInfo.logging[0].metadata = ;
          body.generalInfo.logging[0].options = [new Otpixel.LoggingOptionItem()];
          body.generalInfo.logging[0].options[0].name = "";
          body.generalInfo.logging[0].options[0].type = "";
          body.generalInfo.logging[0].options[0].description = "";
          body.generalInfo.logging[0].options[0].pattern = "";
          body.generalInfo.logging[0].options[0].required = false;
          body.dockerInfo = new Otpixel.DockerInfo();
          body.dockerInfo.dockerName = "";
          body.dockerInfo.label = "";
          body.dockerInfo.dockerRepo = new Otpixel.DockerRepo();
          body.dockerInfo.dockerRepo.url = "";
          body.dockerInfo.dockerRepo.user = "";
          body.dockerInfo.dockerRepo.password = "";
          body.creation = "0";
          body.otStatus = "";

          instance.updateModel(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Otpixel.Model);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.generalInfo).to.be.a(Otpixel.GeneralInfo);
                  expect(data.generalInfo.name).to.be.a('string');
              expect(data.generalInfo.name).to.be("");
              expect(data.generalInfo.version).to.be.a('string');
              expect(data.generalInfo.version).to.be("");
              expect(data.generalInfo.description).to.be.a('string');
              expect(data.generalInfo.description).to.be("");
              expect(data.generalInfo.supportSubscription).to.be.a('boolean');
              expect(data.generalInfo.supportSubscription).to.be(false);
              expect(data.generalInfo.supportExecSync).to.be.a('boolean');
              expect(data.generalInfo.supportExecSync).to.be(false);
              expect(data.generalInfo.supportExecAsync).to.be.a('boolean');
              expect(data.generalInfo.supportExecAsync).to.be(false);
              expect(data.generalInfo.type).to.be.a('string');
              expect(data.generalInfo.type).to.be("");
              expect(data.generalInfo.category).to.be.a('string');
              expect(data.generalInfo.category).to.be("");
              expect(data.generalInfo.system).to.be.a(Otpixel.SystemInfo);
                    {
                  let dataCtr = data.generalInfo.system.connectors;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Otpixel.ConnectorItem);
                    expect(data.type).to.be.a('string');
                    expect(data.type).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    {
                      let dataCtr = data.options;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Otpixel.ConnectorOptionItem);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.type).to.be.a('string');
                        expect(data.type).to.be("");
                        expect(data.pattern).to.be.a('string');
                        expect(data.pattern).to.be("");
                        expect(data.description).to.be.a('string');
                        expect(data.description).to.be("");
                        expect(data.required).to.be.a('boolean');
                        expect(data.required).to.be(false);
        
                              }
                    }
    
                          }
                }
                expect(data.generalInfo.system.transform).to.be.a(Otpixel.Transform);
                      {
                    let dataCtr = data.generalInfo.system.transform.supportedTransformations;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Otpixel.SupportedTransformationItem);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.convertFrom).to.be.a('string');
                      expect(data.convertFrom).to.be("");
                      expect(data.convertTo).to.be.a('string');
                      expect(data.convertTo).to.be("");
      
                            }
                  }
              {
                let dataCtr = data.generalInfo.input;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Otpixel.InputItem);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.type).to.be.a('string');
                  expect(data.type).to.be("");
                  {
                    let dataCtr = data.supportedConnectors;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.required).to.be.a('boolean');
                  expect(data.required).to.be(false);
                  expect(data.metadata).to.be.a(Object);
                  expect(data.metadata).to.be();
                  {
                    let dataCtr = data.options;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Otpixel.InputOptionItem);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.type).to.be.a('string');
                      expect(data.type).to.be("");
                      expect(data.pattern).to.be.a('string');
                      expect(data.pattern).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.required).to.be.a('boolean');
                      expect(data.required).to.be(false);
      
                            }
                  }
  
                        }
              }
              {
                let dataCtr = data.generalInfo.output;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Otpixel.OutputItem);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.type).to.be.a('string');
                  expect(data.type).to.be("");
                  {
                    let dataCtr = data.supportedConnectors;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.required).to.be.a('boolean');
                  expect(data.required).to.be(false);
                  expect(data.metadata).to.be.a(Object);
                  expect(data.metadata).to.be();
                  {
                    let dataCtr = data.options;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Otpixel.OutputOptionItem);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.type).to.be.a('string');
                      expect(data.type).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.pattern).to.be.a('string');
                      expect(data.pattern).to.be("");
                      expect(data.required).to.be.a('boolean');
                      expect(data.required).to.be(false);
      
                            }
                  }
  
                        }
              }
              {
                let dataCtr = data.generalInfo.logging;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Otpixel.LoggingItem);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.type).to.be.a('string');
                  expect(data.type).to.be("");
                  {
                    let dataCtr = data.supportedConnectors;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.required).to.be.a('boolean');
                  expect(data.required).to.be(false);
                  expect(data.verbose).to.be.a('string');
                  expect(data.verbose).to.be("");
                  expect(data.metadata).to.be.a(Object);
                  expect(data.metadata).to.be();
                  {
                    let dataCtr = data.options;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Otpixel.LoggingOptionItem);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.type).to.be.a('string');
                      expect(data.type).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.pattern).to.be.a('string');
                      expect(data.pattern).to.be("");
                      expect(data.required).to.be.a('boolean');
                      expect(data.required).to.be(false);
      
                            }
                  }
  
                        }
              }
            expect(data.dockerInfo).to.be.a(Otpixel.DockerInfo);
                  expect(data.dockerInfo.dockerName).to.be.a('string');
              expect(data.dockerInfo.dockerName).to.be("");
              expect(data.dockerInfo.label).to.be.a('string');
              expect(data.dockerInfo.label).to.be("");
              expect(data.dockerInfo.dockerRepo).to.be.a(Otpixel.DockerRepo);
                    expect(data.dockerInfo.dockerRepo.url).to.be.a('string');
                expect(data.dockerInfo.dockerRepo.url).to.be("");
                expect(data.dockerInfo.dockerRepo.user).to.be.a('string');
                expect(data.dockerInfo.dockerRepo.user).to.be("");
                expect(data.dockerInfo.dockerRepo.password).to.be.a('string');
                expect(data.dockerInfo.dockerRepo.password).to.be("");
            expect(data.creation).to.be.a('number');
            expect(data.creation).to.be("0");
            expect(data.otStatus).to.be.a('string');
            expect(data.otStatus).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
