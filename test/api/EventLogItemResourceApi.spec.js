/*
 * OTPIXEL
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Otpixel);
  }
}(this, function(expect, Otpixel) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Otpixel.EventLogItemResourceApi();
  });

  describe('(package)', function() {
    describe('EventLogItemResourceApi', function() {
      describe('createEventLogItem', function() {
        it('should call createEventLogItem successfully', function(done) {
          // TODO: uncomment, update parameter values for createEventLogItem call and complete the assertions
          /*
          var body = new Otpixel.EventLogItem();
          body.id = "";
          body.name = "";
          body.priority = "";
          body.category = "";
          body.description = "";
          body.action = "";
          body.creation = "0";

          instance.createEventLogItem(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Otpixel.EventLogItem);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.priority).to.be.a('string');
            expect(data.priority).to.be("");
            expect(data.category).to.be.a('string');
            expect(data.category).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.action).to.be.a('string');
            expect(data.action).to.be("");
            expect(data.creation).to.be.a('number');
            expect(data.creation).to.be("0");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteEventLogItem', function() {
        it('should call deleteEventLogItem successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteEventLogItem call
          /*
          var id = "id_example";

          instance.deleteEventLogItem(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getEventLogItemByID', function() {
        it('should call getEventLogItemByID successfully', function(done) {
          // TODO: uncomment, update parameter values for getEventLogItemByID call and complete the assertions
          /*
          var id = "id_example";

          instance.getEventLogItemByID(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Otpixel.EventLogItem);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.priority).to.be.a('string');
            expect(data.priority).to.be("");
            expect(data.category).to.be.a('string');
            expect(data.category).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.action).to.be.a('string');
            expect(data.action).to.be("");
            expect(data.creation).to.be.a('number');
            expect(data.creation).to.be("0");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listEventLogItem', function() {
        it('should call listEventLogItem successfully', function(done) {
          // TODO: uncomment, update parameter values for listEventLogItem call and complete the assertions
          /*
          var opts = {};
          opts.category = "category_example";

          instance.listEventLogItem(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Otpixel.EventLogItem);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.priority).to.be.a('string');
              expect(data.priority).to.be("");
              expect(data.category).to.be.a('string');
              expect(data.category).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.action).to.be.a('string');
              expect(data.action).to.be("");
              expect(data.creation).to.be.a('number');
              expect(data.creation).to.be("0");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateEventLogItem', function() {
        it('should call updateEventLogItem successfully', function(done) {
          // TODO: uncomment, update parameter values for updateEventLogItem call and complete the assertions
          /*
          var body = new Otpixel.EventLogItem();
          body.id = "";
          body.name = "";
          body.priority = "";
          body.category = "";
          body.description = "";
          body.action = "";
          body.creation = "0";

          instance.updateEventLogItem(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Otpixel.EventLogItem);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.priority).to.be.a('string');
            expect(data.priority).to.be("");
            expect(data.category).to.be.a('string');
            expect(data.category).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.action).to.be.a('string');
            expect(data.action).to.be("");
            expect(data.creation).to.be.a('number');
            expect(data.creation).to.be("0");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
