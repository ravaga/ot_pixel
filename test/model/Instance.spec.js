/*
 * OTPIXEL
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Otpixel);
  }
}(this, function(expect, Otpixel) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Instance', function() {
      beforeEach(function() {
        instance = new Otpixel.Instance();
      });

      it('should create an instance of Instance', function() {
        // TODO: update the code to test Instance
        expect(instance).to.be.a(Otpixel.Instance);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property idRef (base name: "idRef")', function() {
        // TODO: update the code to test the property idRef
        expect(instance).to.have.property('idRef');
        // expect(instance.idRef).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property mode (base name: "mode")', function() {
        // TODO: update the code to test the property mode
        expect(instance).to.have.property('mode');
        // expect(instance.mode).to.be(expectedValueLiteral);
      });

      it('should have the property user (base name: "user")', function() {
        // TODO: update the code to test the property user
        expect(instance).to.have.property('user');
        // expect(instance.user).to.be(expectedValueLiteral);
      });

      it('should have the property input (base name: "input")', function() {
        // TODO: update the code to test the property input
        expect(instance).to.have.property('input');
        // expect(instance.input).to.be(expectedValueLiteral);
      });

      it('should have the property forceinput (base name: "forceinput")', function() {
        // TODO: update the code to test the property forceinput
        expect(instance).to.have.property('forceinput');
        // expect(instance.forceinput).to.be(expectedValueLiteral);
      });

      it('should have the property output (base name: "output")', function() {
        // TODO: update the code to test the property output
        expect(instance).to.have.property('output');
        // expect(instance.output).to.be(expectedValueLiteral);
      });

      it('should have the property logging (base name: "logging")', function() {
        // TODO: update the code to test the property logging
        expect(instance).to.have.property('logging');
        // expect(instance.logging).to.be(expectedValueLiteral);
      });

      it('should have the property creation (base name: "creation")', function() {
        // TODO: update the code to test the property creation
        expect(instance).to.have.property('creation');
        // expect(instance.creation).to.be(expectedValueLiteral);
      });

      it('should have the property start (base name: "start")', function() {
        // TODO: update the code to test the property start
        expect(instance).to.have.property('start');
        // expect(instance.start).to.be(expectedValueLiteral);
      });

      it('should have the property otStatus (base name: "otStatus")', function() {
        // TODO: update the code to test the property otStatus
        expect(instance).to.have.property('otStatus');
        // expect(instance.otStatus).to.be(expectedValueLiteral);
      });

      it('should have the property dockerId (base name: "dockerId")', function() {
        // TODO: update the code to test the property dockerId
        expect(instance).to.have.property('dockerId');
        // expect(instance.dockerId).to.be(expectedValueLiteral);
      });

    });
  });

}));
