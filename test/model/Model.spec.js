/*
 * OTPIXEL
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Otpixel);
  }
}(this, function(expect, Otpixel) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Model', function() {
      beforeEach(function() {
        instance = new Otpixel.Model();
      });

      it('should create an instance of Model', function() {
        // TODO: update the code to test Model
        expect(instance).to.be.a(Otpixel.Model);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property category (base name: "category")', function() {
        // TODO: update the code to test the property category
        expect(instance).to.have.property('category');
        // expect(instance.category).to.be(expectedValueLiteral);
      });

      it('should have the property author (base name: "author")', function() {
        // TODO: update the code to test the property author
        expect(instance).to.have.property('author');
        // expect(instance.author).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property urls (base name: "urls")', function() {
        // TODO: update the code to test the property urls
        expect(instance).to.have.property('urls');
        // expect(instance.urls).to.be(expectedValueLiteral);
      });

      it('should have the property creation (base name: "creation")', function() {
        // TODO: update the code to test the property creation
        expect(instance).to.have.property('creation');
        // expect(instance.creation).to.be(expectedValueLiteral);
      });

      it('should have the property ports (base name: "ports")', function() {
        // TODO: update the code to test the property ports
        expect(instance).to.have.property('ports');
        // expect(instance.ports).to.be(expectedValueLiteral);
      });

      it('should have the property schedulable (base name: "schedulable")', function() {
        // TODO: update the code to test the property schedulable
        expect(instance).to.have.property('schedulable');
        // expect(instance.schedulable).to.be(expectedValueLiteral);
      });

      it('should have the property inputDatasources (base name: "inputDatasources")', function() {
        // TODO: update the code to test the property inputDatasources
        expect(instance).to.have.property('inputDatasources');
        // expect(instance.inputDatasources).to.be(expectedValueLiteral);
      });

      it('should have the property inputFormat (base name: "inputFormat")', function() {
        // TODO: update the code to test the property inputFormat
        expect(instance).to.have.property('inputFormat');
        // expect(instance.inputFormat).to.be(expectedValueLiteral);
      });

      it('should have the property outputFormat (base name: "outputFormat")', function() {
        // TODO: update the code to test the property outputFormat
        expect(instance).to.have.property('outputFormat');
        // expect(instance.outputFormat).to.be(expectedValueLiteral);
      });

      it('should have the property cpu (base name: "cpu")', function() {
        // TODO: update the code to test the property cpu
        expect(instance).to.have.property('cpu');
        // expect(instance.cpu).to.be(expectedValueLiteral);
      });

      it('should have the property ram (base name: "ram")', function() {
        // TODO: update the code to test the property ram
        expect(instance).to.have.property('ram');
        // expect(instance.ram).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property licensing (base name: "licensing")', function() {
        // TODO: update the code to test the property licensing
        expect(instance).to.have.property('licensing');
        // expect(instance.licensing).to.be(expectedValueLiteral);
      });

      it('should have the property otDashboardId (base name: "otDashboardId")', function() {
        // TODO: update the code to test the property otDashboardId
        expect(instance).to.have.property('otDashboardId');
        // expect(instance.otDashboardId).to.be(expectedValueLiteral);
      });

    });
  });

}));
