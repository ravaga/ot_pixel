/*
 * OTPIXEL
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/JsonNode', 'model/PredictiveAlgorithm'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/JsonNode'), require('../model/PredictiveAlgorithm'));
  } else {
    // Browser globals (root is window)
    if (!root.Otpixel) {
      root.Otpixel = {};
    }
    root.Otpixel.PredictiveAlgorithmResourceApi = factory(root.Otpixel.ApiClient, root.Otpixel.JsonNode, root.Otpixel.PredictiveAlgorithm);
  }
}(this, function(ApiClient, JsonNode, PredictiveAlgorithm) {
  'use strict';

  /**
   * PredictiveAlgorithmResource service.
   * @module api/PredictiveAlgorithmResourceApi
   * @version 0.0.1
   */

  /**
   * Constructs a new PredictiveAlgorithmResourceApi. 
   * @alias module:api/PredictiveAlgorithmResourceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createPredictiveAlgorithm operation.
     * @callback module:api/PredictiveAlgorithmResourceApi~createPredictiveAlgorithmCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PredictiveAlgorithm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a predictive algorithm
     * If id is not provided, it will be randomly generated
     * @param {module:model/PredictiveAlgorithm} body Predictive algorithm description
     * @param {module:api/PredictiveAlgorithmResourceApi~createPredictiveAlgorithmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PredictiveAlgorithm}
     */
    this.createPredictiveAlgorithm = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPredictiveAlgorithm");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PredictiveAlgorithm;

      return this.apiClient.callApi(
        '/predictiveAlgorithms/create', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePredictiveAlgorithm operation.
     * @callback module:api/PredictiveAlgorithmResourceApi~deletePredictiveAlgorithmCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a predictive algorithm
     * 
     * @param {String} id ID of predictive algorithm
     * @param {module:api/PredictiveAlgorithmResourceApi~deletePredictiveAlgorithmCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePredictiveAlgorithm = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePredictiveAlgorithm");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/predictiveAlgorithms/delete/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the executePredictiveAlgorithm operation.
     * @callback module:api/PredictiveAlgorithmResourceApi~executePredictiveAlgorithmCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute a preditive algorithm by id
     * 
     * @param {String} id Predictive Algorithm
     * @param {module:model/JsonNode} body Input body
     * @param {module:api/PredictiveAlgorithmResourceApi~executePredictiveAlgorithmCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.executePredictiveAlgorithm = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling executePredictiveAlgorithm");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling executePredictiveAlgorithm");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/predictiveAlgorithms/execute/{id}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPredictiveAlgorithm operation.
     * @callback module:api/PredictiveAlgorithmResourceApi~getPredictiveAlgorithmCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PredictiveAlgorithm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a predictive algorithm by id
     * 
     * @param {String} id predictive algorithm
     * @param {module:api/PredictiveAlgorithmResourceApi~getPredictiveAlgorithmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PredictiveAlgorithm}
     */
    this.getPredictiveAlgorithm = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPredictiveAlgorithm");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PredictiveAlgorithm;

      return this.apiClient.callApi(
        '/predictiveAlgorithms/get/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPredictiveAlgorithmInfo operation.
     * @callback module:api/PredictiveAlgorithmResourceApi~getPredictiveAlgorithmInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JsonNode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the status of a predictive algorithm by id
     * 
     * @param {String} id predictive algorithm
     * @param {module:api/PredictiveAlgorithmResourceApi~getPredictiveAlgorithmInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JsonNode}
     */
    this.getPredictiveAlgorithmInfo = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPredictiveAlgorithmInfo");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = JsonNode;

      return this.apiClient.callApi(
        '/predictiveAlgorithms/get/{id}/info', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPredictiveAlgorithmStatus operation.
     * @callback module:api/PredictiveAlgorithmResourceApi~getPredictiveAlgorithmStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JsonNode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the status of a predictive algorithm by id
     * 
     * @param {String} id predictive algorithm
     * @param {module:api/PredictiveAlgorithmResourceApi~getPredictiveAlgorithmStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JsonNode}
     */
    this.getPredictiveAlgorithmStatus = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPredictiveAlgorithmStatus");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = JsonNode;

      return this.apiClient.callApi(
        '/predictiveAlgorithms/get/{id}/status', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listPredictiveAlgorithms operation.
     * @callback module:api/PredictiveAlgorithmResourceApi~listPredictiveAlgorithmsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PredictiveAlgorithm>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all predictive algorithms
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.status status
     * @param {module:api/PredictiveAlgorithmResourceApi~listPredictiveAlgorithmsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PredictiveAlgorithm>}
     */
    this.listPredictiveAlgorithms = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'status': opts['status'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [PredictiveAlgorithm];

      return this.apiClient.callApi(
        '/predictiveAlgorithms/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePredictiveAlgorithm operation.
     * @callback module:api/PredictiveAlgorithmResourceApi~updatePredictiveAlgorithmCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PredictiveAlgorithm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a predictive algorithm
     * 
     * @param {module:model/PredictiveAlgorithm} body Predictive algorithm description
     * @param {module:api/PredictiveAlgorithmResourceApi~updatePredictiveAlgorithmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PredictiveAlgorithm}
     */
    this.updatePredictiveAlgorithm = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePredictiveAlgorithm");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['apikey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PredictiveAlgorithm;

      return this.apiClient.callApi(
        '/predictiveAlgorithms/update', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
